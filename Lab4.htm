<!DOCTYPE html>
<html lang="en">
    <head>
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
        <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" integrity="sha512-xodZBNTC5n17Xt2atTPuE1HxjVMSvLVW9ocqUKLsCC5CXdbqCmblAshOMAS6/keqq/sMZMZ19scR4PsZChSR7A==" crossorigin=""/>
        
        <script src="https://cdnjs.cloudflare.com/ajax/libs/paho-mqtt/1.0.1/mqttws31.min.js" type="text/javascript"></script>
        <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js" integrity="sha512-XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA==" crossorigin=""></script>

        <title>ENGO 651 - Lab 4</title>
    </head>
    <style>
        body{
            margin-left: 5%;
            font-family: Arial, Helvetica, sans-serif;
        }
        h1{
            margin-top: 10px;
        }

        #buttonEnd {      
            margin-left: 5px;
        }

        #map{
            position: absolute;
            margin-right: 20px;
            margin-bottom: 20px;
            width: 50%;
            height: 50%; 
        }


    </style>

    <body>
        <h1>
            Geoweb Application 
        </h1>
        
        
        <h3>
            Connection Status:
        </h3>
        <p id="status">Not Connected</p>
        

        <h2>
            Connect:
        </h2>
        <form id = "con" class="form-inline">
            <input type="text" id="sname" class="form-control mb-2 mr-sm-2" placeholder="Server" name="sname" value="test.mosquitto.org" >
            <input type="text" id="pname" class="form-control mb-2 mr-sm-2" placeholder="Port" name="pname" value="8081">
            <input type="button" class="btn btn-success mb-2" value="Start" onclick="MQTTconnect()">
            <input id = 'buttonEnd' type="button" class="btn btn-danger mb-2" value="End"  onclick="closeConnection()">
        </form>
        <p id="constatus"></p>
        

        <h2>
            Subscribe to Topic:
        </h2>
        <form id="sub" class="form-inline">
            <input type="text" id="tname" class="form-control mb-2 mr-sm-2" name="tname" placeholder="Subscription Topic" value="ENGO651/SetiR/my_temperature"  style = width:300px>
            <input type="button" class="btn btn-primary mb-2" value="Subscribe" onclick="subscribeTopic()">
        </form>
        <p id="substatus"></p>
        

        <h2>
            Send Message:
        </h2>
        <form id="msg" class="form-inline">
            <input type="text" id="mtname" class="form-control mb-2 mr-sm-2" placeholder="Publish Topic" name="mtname" style = width:300px>
            <input type="text" id="msgtext" class="form-control mb-2 mr-sm-2" placeholder="Message" name="msgtext">
            <input type="button" class="btn btn-primary mb-2" value="Send" onclick="sendMessage()">
        </form>
        <p id="msgstatus"></p>
        

        <h3>
            Messages:
        </h3>
        <p id="messages">No Messages</p>
        <h3>
            Map:
        </h3>
        <p>
            <form id="stat" class="form-inline">
                <input type="text" id="crsname" name="crsname" class="form-control mb-2 mr-sm-2" placeholder="Course Code">
                <p class="mb-2 mr-sm-2" >+</p>
                <input type="text" id="yrname" name="yrname" class="form-control mb-2 mr-sm-2" placeholder="Name">
                <p class="mb-2 mr-sm-2" >+</p>
                <em class="mb-2 mr-sm-2">my_temperature</em>
                <input type="button" value="Share My Status" class="btn btn-primary mb-2" onclick="shareStatus()">
            </form>
        </p>
        <div class="row">
        <p id = "mstatus" class="col-sm-6"></p>
        <div id="map" class="col-sm-6"></div>
        </div>
        
        <script>
            var mqtt;
            var reconnectTimeout = 4000;
            var host = "test.mosquitto.org";
            var port = 8081; //Or 8080
            var connection_flag = 0;
            var message = "";
            var intentional_dc = 0;
    
            // On connection lost
            function onConnectionLost() {
                resetFields();
                if (intentional_dc == 0){
                    console.log("Connection lost");
                    document.getElementById("status").innerHTML = "Disconnected. Attempting to Reconnect.";
                    document.getElementById("constatus").innerHTML = "Connection Lost. Attempting to Reconnect.";;
                    setTimeout(MQTTconnect, reconnectTimeout);
                } else{
                    console.log("Disconnected");
                    document.getElementById("status").innerHTML = "Disconnected.";
                    document.getElementById("constatus").innerHTML = "Connection Lost.";
                    document.getElementById('sname').readOnly = false;
                    document.getElementById('pname').readOnly = false;
                }
                connection_flag = 0;
                intentional_dc = 0;
            }
    
            // On connect 
            function onConnect() {
                var tmpStr = "Connected to " + host + " on port " + port;
                document.getElementById("constatus").innerHTML = "Successfully Connected.";
                document.getElementById("status").innerHTML = tmpStr;
                document.getElementById('sname').readOnly = true;
                document.getElementById('pname').readOnly = true;
                console.log(tmpStr);
                connection_flag = 1;
            }
    
            // On failure to connect, automatically attempt to reconnect
            function onFailure(){
                var tmpStr = "Connection Attempt to Host " + host + " on port " + port + " Failed. Attempting to Reconnect.";
                document.getElementById("constatus").innerHTML = tmpStr;
                document.getElementById('sname').readOnly = true;
                document.getElementById('pname').readOnly = true;
                console.log(tmpStr);
                setTimeout(MQTTconnect, reconnectTimeout);
            }
    
            // Logic to check if message is in JSON format
            function isJson(msg) {
                console.log(msg);
                msg = typeof msg !== "string"
                    ? JSON.stringify(msg)
                    : msg;
    
                try {
                    msg = JSON.parse(msg);
                } catch (e) {
                    return false;
                }
    
                if (typeof msg === "object" && msg !== null) {
                    return true;
                }
    
                return false;
            }
    
            // On message arrived
            function onMessageArrived(msg){
                var tmpVar = msg.payloadString;
                if(isJson(tmpVar)){
                    console.log("Received JSON: " + tmpVar);
                    updateMap(tmpVar);
                } else {
                    message = tmpVar;
                    document.getElementById("messages").innerHTML = message;
                    console.log("Received: " + message);
                }
            }
    
            // Connect function by pressing start
            function MQTTconnect() {
                if(connection_flag == 1){
                    var tmpStr = "Already Connected to " + host + "|" + port + ". Click end for new session.";
                    document.getElementById("constatus").innerHTML = tmpStr;
                    document.getElementById('sname').readOnly = true;
                    document.getElementById('pname').readOnly = true;
                    console.log(tmpStr);
                    return;
                }
                document.getElementById("messages").innerHTML = "";
                var s = document.forms["con"]["sname"].value;
                var p = document.forms["con"]["pname"].value;
    
                if(s != "") {
                    host = s;
                    console.log("host = " + host);
                }
    
                if(p != "") {
                    port = parseInt(p);
                    console.log("port = " + port)
                }
    
                console.log("Connecting to " + host + " " + port);
    
                var x = Math.floor(Math.random() * 10000);
                var cname = "clientId-" + x;
    
                mqtt = new Paho.MQTT.Client(host, port, cname);
                var options = {
                    useSSL: true, 
                    timeout: 4000,
                    onSuccess: onConnect,
                    onFailure: onFailure,
                };
    
                mqtt.onMessageArrived = onMessageArrived;
                mqtt.onConnectionLost = onConnectionLost;
                mqtt.connect(options);
    
            }
    
            // Close connection function
            function closeConnection(){
                if(connection_flag == 0){
                    var tmpStr = "Not connected to any session.";
                    document.getElementById("constatus").innerHTML = tmpStr;
                    console.log(tmpStr);
                    return;
                }
                resetFields();
                connection_flag = 0;
                intentional_dc = 1;
                mqtt.disconnect();
                var tmpStr = "Disconnected from " + host + " | " + port;
                document.getElementById("constatus").innerHTML = tmpStr;
                document.getElementById("status").innerHTML = "Not Connected";
                console.log(tmpStr);
            }
    
            // Subscribe to a topic
            function subscribeTopic(){
                document.getElementById("substatus").innerHTML = "";
                if(connection_flag == 0){
                    var tmpStr = "Not connected to any session.";
                    document.getElementById("substatus").innerHTML = tmpStr;
                    console.log(tmpStr);
                    return;
                }
    
                var subtopic = document.forms["sub"]["tname"].value;
                mqtt.subscribe(subtopic);
                console.log("Subbed to topic: " + subtopic);
                document.getElementById("substatus").innerHTML = "Subbed to topic: " + subtopic;
            }
    
            // Send a message 
            function sendMessage(){
                document.getElementById("msgstatus").innerHTML = "";
                if(connection_flag == 0){
                    var tmpStr = "Not connected to any session.";
                    document.getElementById("msgstatus").innerHTML = tmpStr;
                    console.log(tmpStr);
                    return;
                }
    
                var messageText = document.forms["msg"]["msgtext"].value;
                var topic = document.forms["msg"]["mtname"].value;
    
                message = new Paho.MQTT.Message(messageText);
    
                if (topic != "") {
                    message.destinationName = topic;
                } else {
                    message.destinationName = "default-topic";
                }
                mqtt.send(message);
                console.log("Message: " + messageText + " sent.")
                document.getElementById("msgstatus").innerHTML = "Message sent.";
            }
    
            // Reset all status fields
            function resetFields() {
                document.getElementById("messages").innerHTML = "";
                document.getElementById("msgstatus").innerHTML = "";
                document.getElementById("substatus").innerHTML = "";
                document.getElementById("constatus").innerHTML = "";
                document.getElementById("mstatus").innerHTML = "";
            }
    
            // Map
            var map = L.map('map').setView([51.03, -114.04], 11);
    
            var tiles = L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {
                maxZoom: 18,
                attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
                id: 'setir/cl1e86j4m004014qo5e25rhov',
                tileSize: 512,
                zoomOffset: -1,
                accessToken: 'pk.eyJ1Ijoic2V0aXIiLCJhIjoiY2t6eGF6cTBzMDh5YjJucDlxdDM0enE5cCJ9.3_P-KSMqZXf08z9rHzweWw'
            }).addTo(map);

            var greenIcon = new L.Icon({
                iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-green.png',
                shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
                iconSize: [25, 41],
                iconAnchor: [12, 41],
                popupAnchor: [1, -34],
                shadowSize: [41, 41]
            });
    
            var redIcon = new L.Icon({
                iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png',
                shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
                iconSize: [25, 41],
                iconAnchor: [12, 41],
                popupAnchor: [1, -34],
                shadowSize: [41, 41]
            });
    
            var blueIcon = new L.Icon({
                iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-blue.png',
                shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
                iconSize: [25, 41],
                iconAnchor: [12, 41],
                popupAnchor: [1, -34],
                shadowSize: [41, 41]
            });
    
            function updateMap(msg) {
                try {
                    var tmpStr = JSON.stringify(msg);
                    document.getElementById("messages").innerHTML = tmpStr;
                    var tmpJSON = JSON.parse(msg);
                    var la = tmpJSON.latitude;
                    var lo = tmpJSON.longitude;
                    var t = tmpJSON.temperature;
                    document.getElementById("messages").innerHTML = "Received GeoJSON - Latitude: " + la + " | Longitude: " + lo + " | Temperature: " + t;
    
                    if(t < 10) {
                        var marker = L.marker([la, lo], {icon: blueIcon});
                    } else if (t > 29) {
                        var marker = L.marker([la, lo], {icon: redIcon});
                    } else {
                        var marker = L.marker([la, lo], {icon: greenIcon});
                    }
                    marker.bindPopup("Temperature: " + t + " degrees");
                    marker.addTo(map);
                } catch (e) {
                    console.log(e);
                    document.getElementById("messages").innerHTML = "Invalid JSON file for app map.";
                    console.log("Invalid JSON file for app map.");
                }
            }
    
            
            function shareStatus() {
    
                if(connection_flag == 0){
                    var tmpStr = "Not connected to any session.";
                    document.getElementById("mstatus").innerHTML = tmpStr;
                    console.log(tmpStr);
                    return;
                }
    
                const status = document.querySelector('#mstatus');
            
                function success(position) {
                    const latitude  = position.coords.latitude;
                    const longitude = position.coords.longitude;
                    status.textContent = '';
                    var temperature = Math.floor((Math.random() * 101) - 40);
    
                    var la = latitude.toString();
                    var lo = longitude.toString();
                    var t = temperature.toString();
    
                    var geojson = '{"latitude": ' + la + ', "longitude": ' + lo + ', "temperature": ' + t + '}';
    
                    document.getElementById("mstatus").innerHTML = "";
                    if(connection_flag == 0){
                        var tmpStr = "Not connected to any session.";
                        document.getElementById("msgstatus").innerHTML = tmpStr;
                        console.log(tmpStr);
                        return;
                    }
    
                    var name = document.forms["stat"]["yrname"].value;
                    if(name == ""){
                        name = ["yrname"];
                    }
                    var course = document.forms["stat"]["crsname"].value;
                    if(course == ""){
                        course = "ENGO651";
                    }
                    var topic = course + "/" + name + "/my_temperature";
                    var msgjson = new Paho.MQTT.Message(geojson);
                    msgjson.destinationName = topic;
    
                    mqtt.send(msgjson);
                    console.log("Message: " + geojson + " sent to " + topic)
                    document.getElementById("mstatus").innerHTML = "GeoJSON: " + geojson + " sent to " + topic;
                }
            
                function error() {
                    status.textContent = 'Unable to retrieve your location';
                }
            
                if(!navigator.geolocation) {
                    status.textContent = 'Geolocation is not supported by your browser';
                } else {
                    status.textContent = 'Locating…';
                    navigator.geolocation.getCurrentPosition(success, error);
                }
    
            }
        </script>
    </body>
</html>
